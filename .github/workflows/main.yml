name: Build Google Kernel with Lindroid DRM

on:
  workflow_dispatch:

env:
  PATCH_REPO: Linux-on-droid/lindroid-drm-loopback
  KERNEL_BRANCH: android-gs-pantah-5.10-android13-qpr3
  CLANG_VERSION: r416183b

jobs:
  build:
    runs-on: ubuntu-22.04

    steps:
    - name: Checkout Google Kernel Common
      run: |
        mkdir -p google-kernel
        cd google-kernel
        git clone --depth=1 -b $KERNEL_BRANCH https://android.googlesource.com/kernel/common kernel-common
        git clone --depth=1 -b $KERNEL_BRANCH https://android.googlesource.com/kernel/gs kernel/gs-google
        git clone --depth=1 https://android.googlesource.com/kernel/build kernel/build
        git clone --depth=1 https://android.googlesource.com/kernel/configs kernel/configs
        git clone --depth=1 https://android.googlesource.com/platform/system/tools/mkbootimg mkbootimg
        cd ..

    - name: Checkout Lindroid DRM Patch
      uses: actions/checkout@v3
      with:
        repository: ${{ env.PATCH_REPO }}
        path: drm-dkms

    - name: Apply Lindroid DRM Patch
      run: |
        cp -r drm-dkms google-kernel/gs-google/drivers/lindroid-drm
        echo 'obj-y += lindroid-drm/' >> google-kernel/gs-google/drivers/Makefile
        echo 'source "drivers/lindroid-drm/Kconfig"' >> google-kernel/gs-google/drivers/Kconfig

    - name: Install Dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          bc bison build-essential flex lld \
          libssl-dev libncurses5-dev libncursesw5-dev \
          python3 python3-pip rsync cpio zip \
          git curl wget unzip libelf-dev dwarves \
          device-tree-compiler

    - name: Clone Clang & Toolchains
      run: |
        git clone --depth=1 https://android.googlesource.com/platform/prebuilts/clang/host/linux-x86 clang
        echo "${{ github.workspace }}/clang/bin" >> $GITHUB_PATH
        git clone --depth=1 https://android.googlesource.com/platform/prebuilts/gcc/linux-x86/aarch64/aarch64-linux-android-4.9 aarch64-linux-android-4.9
        echo "${{ github.workspace }}/aarch64-linux-android-4.9/bin" >> $GITHUB_PATH

    - name: Build Kernel with build_cloudripper.sh
      run: |
        cd google-kernel/gs-google
        chmod +x build_cloudripper.sh
        export PATH=$PWD/../../clang/bin:$PWD/../../aarch64-linux-android-4.9/bin:$PATH
        ./build_cloudripper.sh

    - name: Build boot.img
      run: |
        mkdir -p artifacts
        echo "init" | cpio -H newc -o > artifacts/ramdisk.img
        python3 ../mkbootimg/mkbootimg.py \
          --kernel google-kernel/gs-google/out/arch/arm64/boot/Image.lz4 \
          --ramdisk artifacts/ramdisk.img \
          --dtb google-kernel/gs-google/out/arch/arm64/boot/dts/google/pantah.dtb \
          --os_version 13.0.0 \
          --os_patch_level 2023-06-05 \
          --header_version 4 \
          --base 0x00000000 \
          --pagesize 4096 \
          --cmdline "console=ttyMSM0,115200n8 earlycon=msm_geni_serial,0xA90000" \
          --output artifacts/boot.img

    - name: Collect Build Outputs
      run: |
        mkdir -p artifacts
        cp google-kernel/gs-google/out/arch/arm64/boot/Image.lz4 artifacts/
        cp google-kernel/gs-google/out/arch/arm64/boot/dts/google/*.dtb artifacts/ || true
        cp google-kernel/gs-google/out/arch/arm64/boot/dts/google/*.dtbo artifacts/ || true
        if [ -d google-kernel/gs-google/out/modules ]; then
          tar -czf artifacts/modules.tar.gz -C google-kernel/gs-google/out/modules .
        fi
        cp artifacts/boot.img artifacts/ || true
        cp google-kernel/gs-google/out/System.map artifacts/ || true
        cp google-kernel/gs-google/out/vmlinux artifacts/ || true

    - name: Upload Artifacts
      uses: actions/upload-artifact@v4
      with:
        name: gki-lindroid-build-full
        path: artifacts
